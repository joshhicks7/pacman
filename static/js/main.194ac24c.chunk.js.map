{"version":3,"sources":["Map.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["GameMap","myMap","className","map","row","rn","col","cn","getNameFromNumber","num","Game","node","position","distance","rootDistance","manhattanD","parent","discovered","this","getEnemyNextPos","enemy","Math","sqrt","pow","abs","myState","playerPos","emptySpots","pos","i","length","j","push","getAllButWallFromMap","rSpot","floor","random","console","log","difficulty","_start","_end","queue","nodeMap","Map","forEach","y","yIndex","x","xIndex","set","join","Infinity","undefined","end","get","start","index","size","values","m","unshift","curNode","pop","unvisited_neighbors","d","neighbor","min","minDistance","includes","nd","nextPositions","AStar","shift","maps","useState","getPlayerPosFromMap","fruitPos","makeFruitOnMap","enemies","getEnemyPosFromMap","setState","playerDir","setPlayerDir","score","setScore","setDifficulty","useEffect","interval","setInterval","m2","pd","np","ne","e","ep","getFruitPosFromMap","prevState","clearInterval","enp","onKeyPress","event","key","toLowerCase","handleKeyPress","tabIndex","onChange","target","value","parseInt","changeDiff","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC7C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC7C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC7C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC7C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC7C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC7C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC7C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC7C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC7C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC7C,CAAC,EAAE,EAAE,EAAE,EAAE,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","file":"static/js/main.194ac24c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Map.css'\r\n\r\nexport default function GameMap({myMap}) \r\n{   \r\n\r\n    return (\r\n        <div className = 'Map' >\r\n            {myMap.map((row, rn) =>            \r\n                <div className = 'map_row' key = {'map_row_' + rn}>\r\n                    {row.map((col,cn)=><div key = {'row_'+ rn + '_' + 'col' + '_' + cn}className = 'node'><div className = {getNameFromNumber(myMap[rn][cn])}></div></div>)} \r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction getNameFromNumber(num)\r\n{\r\n\r\n    let names = {0:'empty', 1:'border', 2:'pacman', 3:'enemy', 4:'fruit'}\r\n\r\n    return names[num]\r\n}","import React, { useState, useEffect} from 'react'\r\nimport './Game.css'\r\nimport GameMap from './Map'\r\n\r\nexport default function Game() \r\n{\r\n    function node(position, distance, rootDistance, manhattanD, parent, discovered)\r\n    {\r\n        this.position = position;\r\n        this.distance = distance;\r\n        this.rootDistance = rootDistance;\r\n        this.manhattanD = manhattanD;\r\n        this.parent = parent;\r\n        this.discovered = discovered;\r\n    }\r\n    \r\n    function getEnemyNextPos(enemy)\r\n    {       \r\n        let distance = Math.sqrt(Math.pow(Math.abs(enemy[1][0] - myState.playerPos[0]) + Math.abs(enemy[1][0] - myState.playerPos[0]),2))\r\n        //if(enemy[0].join() == enemy[1].join() ||  distance <= 5)\r\n        {\r\n            //console.log(\"Same spot\")\r\n            let emptySpots = getAllButWallFromMap(myState.map);\r\n            let rSpot = emptySpots[Math.floor(Math.random() * emptySpots.length)];\r\n            \r\n            if(enemy[2].length == 0 || !enemy[1] || distance <= 5)\r\n            {                \r\n                console.log(difficulty)\r\n                switch(difficulty)\r\n                {\r\n                    case 0:     \r\n                        enemy[1] = [...rSpot]           \r\n                        break;\r\n                    case 1:\r\n                        if(Math.random() > .5)\r\n                        {\r\n                            enemy[1] = [...myState.playerPos];\r\n                        }\r\n                        else\r\n                        {\r\n                            enemy[1] = [...rSpot]\r\n                        }\r\n                        break;\r\n                        \r\n                    case 2:\r\n                        enemy[1] = [...myState.playerPos];\r\n                }       \r\n            }\r\n            \r\n        }      \r\n\r\n        enemy[2] = [...AStar(enemy[0], enemy[1])];\r\n        enemy[0] = enemy[2].shift();\r\n\r\n        return enemy;\r\n        \r\n    }\r\n    //[position, finalPosition, [nextPositions]]\r\n\r\n    function AStar(_start, _end)\r\n    {        \r\n        let queue = [];  \r\n        let nodeMap = new Map();\r\n        myState.map.forEach((y, yIndex)=>y.forEach((x, xIndex)=> {if(myState.map[yIndex][xIndex] != 1)nodeMap.set([yIndex, xIndex].join(),new node([yIndex, xIndex],Infinity, Infinity, 2 * (Math.abs(_end[1] - xIndex) + Math.abs(_end[0] - yIndex)), undefined, undefined))}))     \r\n        let end = nodeMap.get(_end.join());\r\n        let start = nodeMap.get(_start.join());\r\n        start.rootDistance = 0;\r\n        if(_start.join() == _end.join())\r\n        {\r\n            //console.log(_start.join() + \"   \" + _end.join())\r\n            let index = Math.floor(Math.random() * nodeMap.size);\r\n            let i = 0;\r\n\r\n            for(const m of nodeMap.values())\r\n            {\r\n                if( i == index)\r\n                {\r\n                    _end = m.position;\r\n                    end = m;\r\n                    break;\r\n                }\r\n                i++;\r\n\r\n            }\r\n            \r\n        }\r\n        //console.log(nodeMap)\r\n        queue.unshift(start)\r\n        while(!queue.length == 0)\r\n        {\r\n            let curNode = queue.pop();\r\n\r\n            if(typeof(curNode) != 'object')\r\n            {\r\n                //console.log('stupid number' + curNode)\r\n                continue;\r\n            }\r\n\r\n            curNode.discovered = true;\r\n            let dirs = [[1,0],[0,1], [-1,0], [0,-1]];\r\n            let unvisited_neighbors = [];\r\n            dirs.forEach(d=>\r\n                {\r\n                    if(nodeMap.get([curNode.position[0] + d[0],curNode.position[1] + d[1]].join()))\r\n                    {\r\n                        if(!nodeMap.get([curNode.position[0] + d[0],curNode.position[1] + d[1]].join()).discovered)\r\n                        {\r\n                            unvisited_neighbors.push(nodeMap.get([curNode.position[0] + d[0],curNode.position[1] + d[1]].join()));\r\n                        }\r\n                    }                    \r\n                }\r\n            )\r\n\r\n            for(let neighbor of unvisited_neighbors)\r\n            { \r\n                //console.log(neighbor)\r\n                neighbor.rootDistance = Math.min(neighbor.rootDistance, curNode.rootDistance + 1);\r\n                const minDistance = Math.min(neighbor.distance, neighbor.rootDistance + neighbor.manhattanD);\r\n\r\n                if(minDistance !== neighbor.distance)\r\n                {\r\n                    neighbor.distance = minDistance;\r\n                    neighbor.parent = curNode;\r\n\r\n                    if(!queue.includes(neighbor))\r\n                    {\r\n                        queue.unshift(neighbor)\r\n                    }\r\n                }                \r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n       let nd = end;\r\n       let nextPositions = [];\r\n       while(nd.parent)\r\n       {\r\n           nextPositions.unshift(nd.position)\r\n           nd = nd.parent;\r\n       }\r\n       \r\n       return nextPositions;\r\n        \r\n    }\r\n\r\n    function getPlayerPosFromMap(map)\r\n    {\r\n        \r\n        for(let i = 0; i < map.length; i++)\r\n        {\r\n            for(let j = 0; j < map.length; j++)\r\n            {\r\n                if(map[j][i] == 2)\r\n                {\r\n                    return [j,i]\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getAllButWallFromMap(map)\r\n    {\r\n        let pos = [];\r\n        for(let i = 0; i < map.length; i++)\r\n        {\r\n            for(let j = 0; j < map.length; j++)\r\n            {\r\n                if(map[j][i] != 1)\r\n                {\r\n                    pos.push([j,i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return pos;\r\n    }\r\n\r\n    function makeFruitOnMap(map)\r\n    {\r\n        let pos = [];\r\n        for(let i = 0; i < map.length; i++)\r\n        {\r\n            for(let j = 0; j < map.length; j++)\r\n            {\r\n                if(map[j][i] == 0)\r\n                {\r\n                    pos.push([j,i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return pos;\r\n    }\r\n\r\n    function getFruitPosFromMap(map)\r\n    {\r\n        let pos = [];\r\n        for(let i = 0; i < map.length; i++)\r\n        {\r\n            for(let j = 0; j < map.length; j++)\r\n            {\r\n                if(map[j][i] == 4)\r\n                {\r\n                    pos.push([j,i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return pos;\r\n    }\r\n\r\n    function getEnemyPosFromMap(map)\r\n    {\r\n        let pos = [];\r\n        for(let i = 0; i < map.length; i++)\r\n        {\r\n            for(let j = 0; j < map.length; j++)\r\n            {\r\n                if(map[i][j] == 3)\r\n                {\r\n                    pos.push([[i,j],[], []]);\r\n                }\r\n            }\r\n        }\r\n        //console.log(pos)\r\n        return pos;\r\n    }\r\n    //Goes Y first\r\n    const maps = \r\n    [\r\n        [\r\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,1,0,1],\r\n            [1,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,1,0,3,0,1],\r\n            [1,0,1,0,1,1,0,1,4,0,0,1,0,0,0,0,1,0,1,0,1,1,1],\r\n            [1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,1],\r\n            [1,0,1,1,0,1,3,1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1],\r\n            [1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1],\r\n            [1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,0,1],\r\n            [1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1],\r\n            [1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1],\r\n            [1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1],\r\n            [1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1],\r\n            [1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1],\r\n            [1,0,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1],\r\n            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n            [1,0,1,1,1,1,1,1,0,0,0,0,2,0,0,0,0,0,1,1,1,1,1],\r\n            [1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],\r\n            [1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1],\r\n            [1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n            [1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],\r\n            [1,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1],\r\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n        ],\r\n    ]\r\n    let map = maps[0];\r\n    const [myState, setState] = useState({map : maps[0], playerPos : getPlayerPosFromMap(map), fruitPos : makeFruitOnMap(map), enemies : getEnemyPosFromMap(map)});\r\n    const [playerDir, setPlayerDir] = useState([0,0])\r\n    const [score, setScore] = useState(0)\r\n    const [difficulty, setDifficulty] = useState(0)\r\n    \r\n    //Actually Setting state useEffect\r\n    useEffect(() =>\r\n    {\r\n        const interval = setInterval(()=>\r\n        {          \r\n            \r\n            //console.log(myState.fruitPos)\r\n            let enemies = [...myState.enemies]\r\n            let m2 = map.map(x=>x.map(y=>(y!=0 && y!=1)?y=0:y=y));\r\n            myState.fruitPos.forEach(\r\n                i=>m2[i[0]][i[1]] = 4\r\n            )\r\n            m2[myState.playerPos[0]][myState.playerPos[1]] = 2;\r\n            let pd = myState.playerPos;\r\n\r\n            let np = [playerDir[0] + pd[0],[playerDir[1] + pd[1]]];\r\n            let ne = myState.map[np[0]][np[1]];\r\n                        \r\n            enemies.forEach(e=>\r\n                {\r\n                    let ep = [e[0][0],e[0][1]];\r\n                    //console.log(ep)\r\n                    m2[ep[0]][ep[1]] = 3\r\n                })\r\n            if(ne != 1)\r\n            {\r\n                pd[0]+= playerDir[0];\r\n                pd[1]+= playerDir[1];\r\n                if(ne == 4)\r\n                {\r\n                    setScore(score + 1);\r\n                    m2[np[0]][np[1]] = 0;\r\n                    myState.fruitPos = getFruitPosFromMap(m2);                       \r\n                }\r\n            }\r\n            else\r\n            {\r\n\r\n            }       \r\n            setState(prevState=>({...prevState,map:m2, playerPos:pd, fruitPos:myState.fruitPos, enemies:enemies}))\r\n\r\n        }, 50);\r\n\r\n        return () => clearInterval(interval)\r\n    },[playerDir])\r\n\r\n    //PlayerMovementEffect\r\n\r\n\r\n    //EnemyMovementEffect\r\n    useEffect(() =>\r\n    {\r\n        const interval = setInterval(()=>\r\n        {\r\n            let m2 = myState.map.map(x=>x.map(y=>(y!=0 && y!=1)?y=0:y=y));\r\n            let enemies = [];\r\n            myState.enemies.forEach(\r\n                (e)=>\r\n                {\r\n                    let enp = getEnemyNextPos(e)\r\n                    \r\n                    if(enp)\r\n                    {\r\n                        e = enp; \r\n                    }\r\n                    else\r\n                    {\r\n                        m2[e[0][0]][e[0][1]] = 3\r\n                    }            \r\n                    enemies.push(e)       \r\n                }             \r\n\r\n            )\r\n            setState(prevState=>({...prevState,enemies:enemies}))\r\n           \r\n        }, 150)\r\n        return () => clearInterval(interval)\r\n    },[])\r\n    \r\n    const handleKeyPress = (event) => \r\n    {\r\n        const key = event.key.toLowerCase();\r\n        console.log(key)\r\n        switch(key)\r\n        {\r\n           \r\n            case 'w':\r\n                setPlayerDir([-1,0])\r\n                break;\r\n            case 'a':\r\n                setPlayerDir([0,-1])\r\n                break;\r\n            case 's':\r\n                setPlayerDir([1,0])\r\n                break;\r\n            case 'd':\r\n                setPlayerDir([0,1])\r\n                break;\r\n        }\r\n    }\r\n\r\n    const changeDiff = (e) =>\r\n    {\r\n        console.log(e.target.value)\r\n        setDifficulty(parseInt(e.target.value))\r\n        console.log(difficulty)\r\n    }\r\n\r\n    return (\r\n        <div className = 'game' onKeyPress={(e)=>handleKeyPress(e)} tabIndex={0}>\r\n            <GameMap myMap = {myState.map}/>\r\n            \r\n            <div>{score}</div>\r\n            <select onChange= {(e)=>changeDiff(e)}>\r\n                <option value = '0'>easy</option>\r\n                <option value = '1'>Medium</option>\r\n                <option value = '2'>Hard</option>\r\n            </select>\r\n        </div>\r\n    )   \r\n\r\n\r\n\r\n}\r\n\r\n","import './App.css';\nimport React, {useState} from 'react'\nimport Game from './Game';\n\nfunction App() \n{\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}